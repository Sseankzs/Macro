[1mdiff --cc src/RegisterAppsPage.tsx[m
[1mindex e0da6dd,7805b2a..0000000[m
[1m--- a/src/RegisterAppsPage.tsx[m
[1m+++ b/src/RegisterAppsPage.tsx[m
[36m@@@ -1,7 -1,6 +1,7 @@@[m
[31m--import React, { useState, useEffect, useRef } from 'react';[m
[32m++import { useState, useEffect, useRef } from 'react';[m
  import './RegisterAppsPage.css';[m
  import Sidebar from './Sidebar';[m
[32m +import { invoke } from '@tauri-apps/api/core';[m
  [m
  interface App {[m
    id: string;[m
[36m@@@ -28,28 -18,98 +28,197 @@@[m [minterface RegisterAppsPageProps [m
  }[m
  [m
  function RegisterAppsPage({ onLogout, onPageChange }: RegisterAppsPageProps) {[m
[31m -  const [apps, setApps] = useState<App[]>([[m
[31m -    {[m
[31m -      id: '1',[m
[31m -      name: 'Visual Studio Code',[m
[31m -      directory: '/Applications/Visual Studio Code.app',[m
[31m -      icon: 'üíª',[m
[31m -      isEnabled: true,[m
[31m -      category: 'Development',[m
[31m -      lastUsed: '2 hours ago'[m
[31m -    },[m
[31m -    {[m
[31m -      id: '2',[m
[31m -      name: 'Chrome',[m
[31m -      directory: '/Applications/Google Chrome.app',[m
[31m -      icon: 'üåê',[m
[31m -      isEnabled: true,[m
[31m -      category: 'Browser',[m
[31m -      lastUsed: '5 minutes ago'[m
[31m -    },[m
[31m -    {[m
[31m -      id: '3',[m
[31m -      name: 'Slack',[m
[31m -      directory: '/Applications/Slack.app',[m
[31m -      icon: 'üí¨',[m
[31m -      isEnabled: true,[m
[31m -      category: 'Communication',[m
[31m -      lastUsed: '1 hour ago'[m
[31m -    },[m
[31m -    {[m
[31m -      id: '4',[m
[31m -      name: 'Figma',[m
[31m -      directory: '/Applications/Figma.app',[m
[31m -      icon: 'üé®',[m
[31m -      isEnabled: false,[m
[31m -      category: 'Design',[m
[31m -      lastUsed: '3 days ago'[m
[31m -    },[m
[31m -    {[m
[31m -      id: '5',[m
[31m -      name: 'Terminal',[m
[31m -      directory: '/Applications/Utilities/Terminal.app',[m
[31m -      icon: '‚ö°',[m
[31m -      isEnabled: true,[m
[31m -      category: 'Development',[m
[31m -      lastUsed: '30 minutes ago'[m
[31m -    },[m
[31m -    {[m
[31m -      id: '6',[m
[31m -      name: 'Spotify',[m
[31m -      directory: '/Applications/Spotify.app',[m
[31m -      icon: 'üéµ',[m
[31m -      isEnabled: false,[m
[31m -      category: 'Entertainment',[m
[31m -      lastUsed: '1 week ago'[m
[31m -    },[m
[31m -    {[m
[31m -      id: '7',[m
[31m -      name: 'Xcode',[m
[31m -      directory: '/Applications/Xcode.app',[m
[31m -      icon: 'üì±',[m
[31m -      isEnabled: true,[m
[31m -      category: 'Development',[m
[31m -      lastUsed: '4 hours ago'[m
[31m -    },[m
[31m -    {[m
[31m -      id: '8',[m
[31m -      name: 'Discord',[m
[31m -      directory: '/Applications/Discord.app',[m
[31m -      icon: 'üéÆ',[m
[31m -      isEnabled: false,[m
[31m -      category: 'Communication',[m
[31m -      lastUsed: '2 days ago'[m
[31m -    }[m
[31m -  ]);[m
[32m +  const [apps, setApps] = useState<App[]>([]);[m
[32m++  const [isLoadingApps, setIsLoadingApps] = useState(true);[m
[32m++  const [error, setError] = useState<string | null>(null);[m
[32m++  const [connectionStatus, setConnectionStatus] = useState<'checking' | 'connected' | 'disconnected' | 'error'>('checking');[m
[32m++  const [debugInfo, setDebugInfo] = useState<any>(null);[m
[32m++  const [rlsErrors, setRlsErrors] = useState<string[]>([]);[m
  [m
    const [showDropdown, setShowDropdown] = useState(false);[m
[32m+   const [isEditMode, setIsEditMode] = useState(false);[m
    const dropdownRef = useRef<HTMLDivElement>(null);[m
[31m -  const [availableApps] = useState([[m
[31m -    { name: 'Visual Studio Code', directory: '/Applications/Visual Studio Code.app', icon: 'üíª' },[m
[31m -    { name: 'Chrome', directory: '/Applications/Google Chrome.app', icon: 'üåê' },[m
[31m -    { name: 'Slack', directory: '/Applications/Slack.app', icon: 'üí¨' },[m
[31m -    { name: 'Figma', directory: '/Applications/Figma.app', icon: 'üé®' },[m
[31m -    { name: 'Terminal', directory: '/Applications/Utilities/Terminal.app', icon: '‚ö°' },[m
[31m -    { name: 'Spotify', directory: '/Applications/Spotify.app', icon: 'üéµ' },[m
[31m -    { name: 'Xcode', directory: '/Applications/Xcode.app', icon: 'üì±' },[m
[31m -    { name: 'Discord', directory: '/Applications/Discord.app', icon: 'üéÆ' },[m
[31m -    { name: 'Safari', directory: '/Applications/Safari.app', icon: 'üß≠' },[m
[31m -    { name: 'Mail', directory: '/Applications/Mail.app', icon: 'üìß' },[m
[31m -    { name: 'Calendar', directory: '/Applications/Calendar.app', icon: 'üìÖ' },[m
[31m -    { name: 'Notes', directory: '/Applications/Notes.app', icon: 'üìù' }[m
[31m -  ]);[m
[32m +  const [detectedApps, setDetectedApps] = useState<DetectedApp[]>([]);[m
[32m +  const [isLoadingDetectedApps, setIsLoadingDetectedApps] = useState(false);[m
[32m +[m
[32m++  // Test database connection and check for RLS issues[m
[32m++  const testDatabaseConnection = async () => {[m
[32m++    try {[m
[32m++      console.log('üîç Testing database connection...');[m
[32m++      setConnectionStatus('checking');[m
[32m++      [m
[32m++      const isConnected = await invoke<boolean>('test_database_connection');[m
[32m++      [m
[32m++      if (isConnected) {[m
[32m++        console.log('‚úÖ Database connection successful');[m
[32m++        setConnectionStatus('connected');[m
[32m++        setError(null);[m
[32m++      } else {[m
[32m++        console.log('‚ùå Database connection failed');[m
[32m++        setConnectionStatus('disconnected');[m
[32m++        setError('Database connection failed');[m
[32m++      }[m
[32m++    } catch (error) {[m
[32m++      console.error('üö® Database connection error:', error);[m
[32m++      setConnectionStatus('error');[m
[32m++      [m
[32m++      const errorMessage = error instanceof Error ? error.message : String(error);[m
[32m++      [m
[32m++      // Check for specific RLS errors[m
[32m++      if (errorMessage.includes('42501') || errorMessage.includes('row-level security')) {[m
[32m++        const rlsError = 'Row Level Security (RLS) policy violation. Check if user exists and has proper permissions.';[m
[32m++        setRlsErrors(prev => [...prev, rlsError]);[m
[32m++        setError(`RLS Error: ${rlsError}`);[m
[32m++      } else if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {[m
[32m++        const authError = 'Authentication failed. Check Supabase credentials in .env file.';[m
[32m++        setRlsErrors(prev => [...prev, authError]);[m
[32m++        setError(`Auth Error: ${authError}`);[m
[32m++      } else if (errorMessage.includes('network') || errorMessage.includes('timeout')) {[m
[32m++        const networkError = 'Network connection issue. Check internet connection and Supabase URL.';[m
[32m++        setRlsErrors(prev => [...prev, networkError]);[m
[32m++        setError(`Network Error: ${networkError}`);[m
[32m++      } else {[m
[32m++        setError(`Database Error: ${errorMessage}`);[m
[32m++      }[m
[32m++    }[m
[32m++  };[m
[32m++[m
[32m++  // Enhanced debug function[m
[32m++  const collectDebugInfo = async () => {[m
[32m++    try {[m
[32m++      console.log('üîç Collecting debug information...');[m
[32m++      [m
[32m++      const debugData: any = {[m
[32m++        timestamp: new Date().toISOString(),[m
[32m++        connectionStatus,[m
[32m++        apps: apps.length,[m
[32m++        detectedApps: detectedApps.length,[m
[32m++        error: error,[m
[32m++        rlsErrors: rlsErrors,[m
[32m++        environment: {[m
[32m++          nodeEnv: import.meta.env.MODE,[m
[32m++          hasSupabaseUrl: !!import.meta.env.VITE_SUPABASE_URL,[m
[32m++          hasSupabaseKey: !!import.meta.env.VITE_SUPABASE_ANON_KEY[m
[32m++        }[m
[32m++      };[m
[32m++[m
[32m++      // Test database connection[m
[32m++      try {[m
[32m++        const dbTest = await invoke<boolean>('test_database_connection');[m
[32m++        debugData.databaseTest = dbTest;[m
[32m++      } catch (dbError) {[m
[32m++        debugData.databaseError = dbError instanceof Error ? dbError.message : String(dbError);[m
[32m++      }[m
[32m++[m
[32m++      // Test current user[m
[32m++      try {[m
[32m++        const currentUser = await invoke('get_current_user');[m
[32m++        debugData.currentUser = currentUser;[m
[32m++      } catch (userError) {[m
[32m++        debugData.userError = userError instanceof Error ? userError.message : String(userError);[m
[32m++      }[m
[32m++[m
[32m++      setDebugInfo(debugData);[m
[32m++      console.log('üìä Debug info collected:', debugData);[m
[32m++      [m
[32m++      return debugData;[m
[32m++    } catch (error) {[m
[32m++      console.error('‚ùå Failed to collect debug info:', error);[m
[32m++      return { error: error instanceof Error ? error.message : String(error) };[m
[32m++    }[m
[32m++  };[m
[32m++[m
[32m++  // Load apps on component mount with enhanced error handling[m
[32m++  useEffect(() => {[m
[32m++    const initializePage = async () => {[m
[32m++      console.log('üöÄ Initializing RegisterAppsPage...');[m
[32m++      [m
[32m++      // First test database connection[m
[32m++      await testDatabaseConnection();[m
[32m++      [m
[32m++      // Then try to load apps[m
[32m++      await fetchApps();[m
[32m++    };[m
[32m++    [m
[32m++    initializePage();[m
[32m++  }, []);[m
[32m++[m
[32m++  // Fetch apps from database with comprehensive error handling[m
[32m++  const fetchApps = async () => {[m
[32m++    try {[m
[32m++      console.log('üì± Fetching user apps from database...');[m
[32m++      setIsLoadingApps(true);[m
[32m++      setError(null);[m
[32m++      [m
[32m++      const apps = await invoke<App[]>('get_my_applications');[m
[32m++      console.log('‚úÖ Successfully fetched apps:', apps);[m
[32m++      setApps(apps);[m
[32m++    } catch (error) {[m
[32m++      console.error('‚ùå Failed to fetch apps:', error);[m
[32m++      [m
[32m++      const errorMessage = error instanceof Error ? error.message : String(error);[m
[32m++      [m
[32m++      // Analyze error for RLS issues[m
[32m++      if (errorMessage.includes('42501') || errorMessage.includes('row-level security')) {[m
[32m++        const rlsError = 'RLS Policy Error: User may not exist or lacks permissions to read applications table.';[m
[32m++        setRlsErrors(prev => [...prev, rlsError]);[m
[32m++        setError(`RLS Error: ${rlsError}`);[m
[32m++      } else if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {[m
[32m++        const authError = 'Authentication Error: Invalid Supabase credentials or API key.';[m
[32m++        setRlsErrors(prev => [...prev, authError]);[m
[32m++        setError(`Auth Error: ${authError}`);[m
[32m++      } else {[m
[32m++        setError(`Failed to load applications: ${errorMessage}`);[m
[32m++      }[m
[32m++      [m
[32m++      setApps([]);[m
[32m++    } finally {[m
[32m++      setIsLoadingApps(false);[m
[32m++    }[m
[32m++  };[m
[32m++[m
[32m +  // Fetch detected apps when dropdown opens[m
[32m +  const fetchDetectedApps = async () => {[m
[32m +    try {[m
[32m++      console.log('üîç Fetching detected apps...');[m
[32m +      setIsLoadingDetectedApps(true);[m
[32m++      setError(null);[m
[32m++      [m
[32m +      const apps = await invoke<DetectedApp[]>('get_running_processes');[m
[32m++      console.log('üì± Raw detected apps:', apps);[m
[32m++      [m
[32m +      // Filter out background apps (only show active apps)[m
[32m +      const activeApps = apps.filter(app => app.is_active);[m
[32m++      console.log('‚úÖ Active apps found:', activeApps.length);[m
[32m++      [m
[32m +      setDetectedApps(activeApps);[m
[32m++      [m
[32m++      if (activeApps.length === 0) {[m
[32m++        console.log('‚ö†Ô∏è No active apps detected');[m
[32m++        setError('No active applications detected. Please open an application and try again.');[m
[32m++      }[m
[32m +    } catch (error) {[m
[31m-       console.error('Failed to fetch detected apps:', error);[m
[32m++      console.error('‚ùå Failed to fetch detected apps:', error);[m
[32m++      [m
[32m++      const errorMessage = error instanceof Error ? error.message : String(error);[m
[32m++      [m
[32m++      if (errorMessage.includes('permission')) {[m
[32m++        const permError = 'Permission denied to access running processes.';[m
[32m++        setRlsErrors(prev => [...prev, permError]);[m
[32m++        setError(`Permission Error: ${permError}`);[m
[32m++      } else if (errorMessage.includes('timeout')) {[m
[32m++        const timeoutError = 'Process detection timed out.';[m
[32m++        setRlsErrors(prev => [...prev, timeoutError]);[m
[32m++        setError(`Timeout Error: ${timeoutError}`);[m
[32m++      } else {[m
[32m++        setError(`Failed to detect applications: ${errorMessage}`);[m
[32m++      }[m
[32m++      [m
[32m +      setDetectedApps([]);[m
[32m +    } finally {[m
[32m +      setIsLoadingDetectedApps(false);[m
[32m +    }[m
[32m +  };[m
  [m
    // Close dropdown when clicking outside[m
    useEffect(() => {[m
[36m@@@ -68,88 -128,48 +237,216 @@@[m
      };[m
    }, [showDropdown]);[m
  [m
[31m--  const handleToggleApp = (appId: string) => {[m
[31m--    setApps(prevApps =>[m
[31m--      prevApps.map(app =>[m
[31m--        app.id === appId ? { ...app, isEnabled: !app.isEnabled } : app[m
[31m--      )[m
[31m--    );[m
[31m -  };[m
[32m++  const handleToggleApp = async (appId: string) => {[m
[32m++    try {[m
[32m++      console.log('üîÑ Toggling app:', appId);[m
[32m++      [m
[32m++      const app = apps.find(a => a.id === appId);[m
[32m++      if (!app) {[m
[32m++        console.error('‚ùå App not found:', appId);[m
[32m++        setError('App not found');[m
[32m++        return;[m
[32m++      }[m
[32m++[m
[32m++      console.log('üì± App details:', { name: app.name, currentStatus: app.isEnabled });[m
[32m++[m
[32m++      await invoke('update_my_application', {[m
[32m++        appId: appId,[m
[32m++        isTracked: !app.isEnabled[m
[32m++      });[m
[32m+ [m
[31m -  const handleDeleteApp = (appId: string) => {[m
[31m -    setApps(prevApps => prevApps.filter(app => app.id !== appId));[m
[32m++      console.log('‚úÖ App status updated successfully');[m
[32m++[m
[32m++      // Update local state[m
[32m++      setApps(prevApps =>[m
[32m++        prevApps.map(app =>[m
[32m++          app.id === appId ? { ...app, isEnabled: !app.isEnabled } : app[m
[32m++        )[m
[32m++      );[m
[32m++      [m
[32m++      setError(null);[m
[32m++    } catch (error) {[m
[32m++      console.error('‚ùå Failed to toggle app:', error);[m
[32m++      [m
[32m++      const errorMessage = error instanceof Error ? error.message : String(error);[m
[32m++      [m
[32m++      // Analyze RLS errors[m
[32m++      if (errorMessage.includes('42501') || errorMessage.includes('row-level security')) {[m
[32m++        const rlsError = 'RLS Policy Error: User lacks permission to update applications table.';[m
[32m++        setRlsErrors(prev => [...prev, rlsError]);[m
[32m++        setError(`RLS Error: ${rlsError}`);[m
[32m++      } else if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {[m
[32m++        const authError = 'Authentication Error: Invalid credentials for update operation.';[m
[32m++        setRlsErrors(prev => [...prev, authError]);[m
[32m++        setError(`Auth Error: ${authError}`);[m
[32m++      } else {[m
[32m++        setError(`Failed to update application status: ${errorMessage}`);[m
[32m++      }[m
[32m++    }[m
    };[m
  [m
[31m-   const handleDeleteApp = (appId: string) => {[m
[31m-     setApps(prevApps => prevApps.filter(app => app.id !== appId));[m
[32m++  const handleDeleteApp = async (appId: string) => {[m
[32m++    try {[m
[32m++      console.log('üóëÔ∏è Deleting app:', appId);[m
[32m++      [m
[32m++      const app = apps.find(a => a.id === appId);[m
[32m++      if (!app) {[m
[32m++        console.error('‚ùå App not found for deletion:', appId);[m
[32m++        setError('App not found');[m
[32m++        return;[m
[32m++      }[m
[32m+ [m
[31m -  const handleAddFromDropdown = (availableApp: { name: string; directory: string; icon: string }) => {[m
[31m -    // Check if app is already registered[m
[31m -    const isAlreadyRegistered = apps.some(app => app.name === availableApp.name);[m
[31m -    if (isAlreadyRegistered) return;[m
[32m++      console.log('üì± Deleting app:', { name: app.name, id: appId });[m
[32m+ [m
[31m -    const newApp: App = {[m
[31m -      id: Date.now().toString(),[m
[31m -      name: availableApp.name,[m
[31m -      directory: availableApp.directory,[m
[31m -      icon: availableApp.icon,[m
[31m -      isEnabled: true,[m
[31m -      category: 'Other',[m
[31m -      lastUsed: 'Just added'[m
[31m -    };[m
[31m -    setApps(prevApps => [...prevApps, newApp]);[m
[31m -    setShowDropdown(false);[m
[32m++      await invoke('delete_my_application', { appId });[m
[32m++      [m
[32m++      console.log('‚úÖ App deleted successfully');[m
[32m++      [m
[32m++      // Update local state[m
[32m++      setApps(prevApps => prevApps.filter(app => app.id !== appId));[m
[32m++      setError(null);[m
[32m++    } catch (error) {[m
[32m++      console.error('‚ùå Failed to delete app:', error);[m
[32m++      [m
[32m++      const errorMessage = error instanceof Error ? error.message : String(error);[m
[32m++      [m
[32m++      // Analyze RLS errors[m
[32m++      if (errorMessage.includes('42501') || errorMessage.includes('row-level security')) {[m
[32m++        const rlsError = 'RLS Policy Error: User lacks permission to delete from applications table.';[m
[32m++        setRlsErrors(prev => [...prev, rlsError]);[m
[32m++        setError(`RLS Error: ${rlsError}`);[m
[32m++      } else if (errorMessage.includes('401') || errorMessage.includes('Unauthorized')) {[m
[32m++        const authError = 'Authentication Error: Invalid credentials for delete operation.';[m
[32m++        setRlsErrors(prev => [...prev, authError]);[m
[32m++        setError(`Auth Error: ${authError}`);[m
[32m++      } else {[m
[32m++        setError(`Failed to delete application: ${errorMessage}`);[m
[32m++      }[m
[32m++    }[m
    };[m
  [m
[31m -  const getCategoryColor = (category: string) => {[m
[31m -    switch (category) {[m
[31m -      case 'Development': return '#007aff';[m
[31m -      case 'Browser': return '#34c759';[m
[31m -      case 'Communication': return '#af52de';[m
[31m -      case 'Design': return '#ff9500';[m
[31m -      case 'Entertainment': return '#ff3b30';[m
[31m -      default: return '#8e8e93';[m
[32m +[m
[32m +  const handleDropdownToggle = () => {[m
[32m +    if (!showDropdown) {[m
[32m +      fetchDetectedApps();[m
[32m +    }[m
[32m +    setShowDropdown(!showDropdown);[m
[32m +  };[m
[32m +[m
[31m-   const handleAddFromDropdown = (detectedApp: DetectedApp) => {[m
[31m-     // Check if app is already registered[m
[31m-     const isAlreadyRegistered = apps.some(app => app.name === detectedApp.name);[m
[31m-     if (isAlreadyRegistered) return;[m
[31m- [m
[31m-     const newApp: App = {[m
[31m-       id: Date.now().toString(),[m
[31m-       name: detectedApp.name,[m
[31m-       directory: detectedApp.directory || 'Unknown location',[m
[31m-       icon: getAppIcon(detectedApp.name),[m
[31m-       isEnabled: true,[m
[31m-       category: 'Detected',[m
[31m-       lastUsed: 'Just added'[m
[31m-     };[m
[31m-     setApps(prevApps => [...prevApps, newApp]);[m
[31m-     setShowDropdown(false);[m
[32m++  const handleAddFromDropdown = async (detectedApp: DetectedApp) => {[m
[32m++    try {[m
[32m++      console.